generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  username     String     @unique
  password     String
  tag          String
  age          Int
  gender       String
  verified     Boolean    @default(false)
  bio          String?
  createdAt    DateTime   @default(now())
  isCritic     Boolean    @default(false)
  profileImage String?
  updatedAt    DateTime   @updatedAt
  comments     Comment[]
  followers    Follower[] @relation("UserFollowers")
  following    Follower[] @relation("UserFollowing")
  posts        Post[]
  views        View[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  icon        String?
  posts       Post[]
}

model Post {
  id          String    @id @default(uuid())
  userId      String
  title       String
  content     String
  location    String?
  duration    String
  uploadMedia String
  categoryId  String
  postDate    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        String[]
  comments    Comment[]
  category    Category  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  views       View[]
}

model View {
  id        String   @id @default(uuid())
  postId    String
  userId    String?
  timestamp DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model Follower {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgeGroupAnalytics {
  id         String   @id @default(uuid())
  postId     String?
  userId     String?
  categoryId String?
  ageGroup   String
  viewCount  Int      @default(0)
  date       DateTime @default(now())
}

model GenderAnalytics {
  id         String   @id @default(uuid())
  postId     String?
  userId     String?
  categoryId String?
  gender     String
  viewCount  Int      @default(0)
  date       DateTime @default(now())
}
